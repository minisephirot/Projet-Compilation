main:
# init variable repérer la zone des variables
move $s7, $sp
# opération  == , calcul de gauche
# opération  != , calcul de gauche
# opération  < , calcul de gauche
# constante entière
li $v0, 3
# empiler gauche
sw $v0, ($sp)
addi $sp, $sp, -4
# calcul de droite
# constante entière
li $v0, 4
# dépile gauche dans $t8
addi $sp, $sp, 4
lw $t8, ($sp)
# Début comparaison
Si5:
# Soustraction des 2 variables comparées
sub $v0, $t8, $v0
# Comparaison à 0 du résultat
bltz $v0, Alors5
# Sinon supérieur ou égal à 0 renvoie false
Sinon5:
li $v0, 0
b Fin5
# Si inférieur à 0 renvoie true
Alors5:
li $v0, 1
Fin5:
# empiler gauche
sw $v0, ($sp)
addi $sp, $sp, -4
# calcul de droite
# constante bool
li $v0, 1
# dépile gauche dans $t8
addi $sp, $sp, 4
lw $t8, ($sp)
# Début comparaison
Si4:
# Soustraction des 2 variables comparées
sub $v0, $t8, $v0
# Comparaison à 0 du résultat
beqz $v0, Sinon4
# Si différent de 0 renvoie true
Alors4:
li $v0, 1
b Fin4
# Sinon égal à 0 renvoie false
Sinon4:
li $v0, 0
Fin4:
# empiler gauche
sw $v0, ($sp)
addi $sp, $sp, -4
# calcul de droite
# constante bool
li $v0, 0
# dépile gauche dans $t8
addi $sp, $sp, 4
lw $t8, ($sp)
# Début comparaison
Si3:
# Soustraction des 2 variables comparées
sub $v0, $t8, $v0
# Comparaison à 0 du résultat
beqz $v0, Sinon3
# Si différent de 0 renvoie false
Alors3:
li $v0, 0
b Fin3
# Sinon égal à 0 renvoie true
Sinon3:
li $v0, 1
Fin3:
end:
move $v1, $v0      # copie de v0 dans v1 pour permettre les tests de plic0
li $v0, 10         # retour au système
syscall