package yal.analyse ;

import java.util.HashMap;


import java.util.ArrayList;
import yal.arbre.ArbreAbstrait;
import yal.arbre.BlocDInstructions;
import yal.arbre.Fonction;
import yal.arbre.Programme;
import yal.arbre.expression.Appel;
import yal.arbre.expression.Expression;
import yal.arbre.expression.binaire.arithmetique.Div;
import yal.arbre.expression.binaire.arithmetique.Moins;
import yal.arbre.expression.binaire.arithmetique.Mult;
import yal.arbre.expression.binaire.arithmetique.Plus;
import yal.arbre.expression.binaire.comparaison.Different;
import yal.arbre.expression.binaire.comparaison.Egal;
import yal.arbre.expression.binaire.comparaison.Inferieur;
import yal.arbre.expression.binaire.comparaison.Superieur;
import yal.arbre.expression.binaire.logique.EtLogique;
import yal.arbre.expression.binaire.logique.OuLogique;
import yal.arbre.expression.constante.ConstanteBool;
import yal.arbre.expression.constante.ConstanteEntiere;
import yal.arbre.expression.idf.IDFFonc;
import yal.arbre.expression.idf.IDFVar;
import yal.arbre.expression.unaire.MoinsUnaire;
import yal.arbre.expression.unaire.NonLogique;
import yal.arbre.instruction.*;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.outils.tableDesSymboles.EntreeParam;
import yal.outils.tableDesSymboles.EntreeVar;
import yal.outils.tableDesSymboles.SymboleVar;
import yal.outils.tableDesSymboles.TableDesSymboles;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    POINTVIRGULE, VIRGULE, PLUS, MOINS, MULT, DIV, PAROUV, PARFER ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON, EGAL, PROGRAMME, ENTIER, DEBUT, FIN, ECR, FONCTION, RETOURNE;
terminal Symbol    TANTQUE, REPETER, FINTANTQUE, SI, ALORS, SINON, FSI, LIRE;
terminal String    CONSTANTECHAINE, CONSTANTEINT, CONSTANTEBOOL, IDF;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG ;
non terminal BlocDInstructions LINSTR, LDECL;
non terminal Expression EXPR, CSTE ;
non terminal Affectation AFFECT;
non terminal String  CREERBLOC;
non terminal DECL_VAR, LDECLV ;
non terminal Fonction DECL_FONC, DECL;
non terminal Instruction INSTR;
non terminal Ecrire ECRIRE;
non terminal Lire LECTURE;
non terminal Boucle BOUCLE;
non terminal Condition CONDITION;
non terminal Retourne RETOUR;
non terminal Integer ENTIERPARAM, LPARAM, PARAM;
non terminal ArrayList<Expression> PAR_EFF;

precedence left OU ;
precedence left ET ;
precedence left EGALEGAL, DIFF;
precedence left INF, SUP ;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=    	PROGRAMME IDF DEBUT LDECL:di LINSTR:bi FIN
				{:	Programme p = new Programme(bileft+1,bi,di);
					RESULT = p; :}
		|		PROGRAMME IDF DEBUT LINSTR:bi FIN
				{:	Programme p = new Programme(bileft+1,bi);
					RESULT = p; :}
				;

LDECL    ::=    LDECL:li  DECL:d
                {: if(d != null)
                     li.ajouter(d);
		   		   RESULT = li; :}
		|		DECL:d
                {: BlocDInstructions li = new BlocDInstructions(dleft + 1);
		    	   if(d != null)
		      	     li.ajouter(d);
		    	   RESULT = li; :}
				;
				
DECL 	 ::=	DECL_VAR
                {: RESULT = null; :}
		|		DECL_FONC:d
                 {: RESULT = d; :}
				;

LDECLV	::=		LDECLV DECL_VAR
		|		DECL_VAR
				;

DECL_VAR ::=	ENTIER IDF:i POINTVIRGULE
				{: TableDesSymboles.getInstance().ajouter(new EntreeVar(i, ileft+1), new SymboleVar(false)) ; :}
				;
	
DECL_FONC ::=	FONCTION CREERBLOC:i PARAM:cmpt DEBUT LINSTR:bloc FIN
				{:  RESULT = new Fonction(ileft+1,new IDFFonc(i, ileft+1,cmpt), bloc,cmpt) ; :}
		|		FONCTION CREERBLOC:i PARAM:cmpt DEBUT LDECLV LINSTR:bi FIN
				{:  RESULT = new Fonction(ileft+1,new IDFFonc(i, ileft+1,cmpt), bi,cmpt) ; :}
				;
				
CREERBLOC ::=   IDF:i
				{: 	TableDesSymboles.getInstance().ajouterBloc(); 
					RESULT = i; :}
				;


PARAM	::=		PAROUV PARFER
				{: RESULT = 0; :}
		|		PAROUV LPARAM:cmpt PARFER
				{: RESULT = cmpt; :}
				; 
				
LPARAM	::=		LPARAM:cmpt POINTVIRGULE ENTIERPARAM
				{: RESULT = cmpt + 1; :}
		|		ENTIERPARAM
				{: RESULT = 1 ; :}
				;
				
ENTIERPARAM ::=	ENTIER IDF:i
				{: TableDesSymboles.getInstance().ajouter(new EntreeParam(i, ileft+1), new SymboleVar(true)) ; :}
				;
			
LINSTR  ::=     LINSTR:bi INSTR:i
				{:  bi.ajouter(i);
					RESULT = bi;   :}
		|		INSTR:i
				{:  BlocDInstructions bi = new BlocDInstructions(ileft+1);
					bi.ajouter(i);
					RESULT = bi; :}
				;

		
INSTR   ::=     AFFECT:a 
                {: RESULT = a ; :}
        |        ECRIRE:e
                {: RESULT = e ; :}               
        |       BOUCLE:b       
                {: RESULT = b ; :}              
        |       LECTURE:l
                {: RESULT = l ; :}                
        |       CONDITION:c       
                {: RESULT = c ; :}
        |		RETOUR:r
        		{: RESULT = r ; :}
                ;

RETOUR ::=	RETOURNE EXPR:e POINTVIRGULE
				{: RESULT = new Retourne(e, eleft + 1, TableDesSymboles.getInstance().getNbBlocActuel()) ; :}
				;

LECTURE ::=     LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new IDFVar(i,ileft), ileft); :}
                ;     
			
ECRIRE  ::=     ECR EXPR:e POINTVIRGULE
				{: RESULT = new EcrireVar(e, eleft +1); :}
		|		ECR CONSTANTECHAINE:c POINTVIRGULE
				{: RESULT = new EcrireString(c, cleft + 1); :}
				;

AFFECT  ::=     IDF:idf EGAL EXPR:e POINTVIRGULE
				{: RESULT = new Affectation(new IDFVar(idf, eleft + 1), e, eleft +1); :}
				;
				
BOUCLE  ::=     TANTQUE EXPR:e REPETER LINSTR:li FINTANTQUE
                {: Boucle b = new Boucle(e, eleft + 1) ; 
                   b.ajouter(li) ;
                   RESULT = b ; :}
                ;
                
CONDITION ::=   SI EXPR:e ALORS LINSTR:li FSI
                {: Condition c = new Condition(e, eleft + 1) ;
                   c.ajouterSi(li);
                   RESULT = c ; :} 
          |     SI EXPR:e ALORS FSI
                {: Condition c = new Condition(e, eleft + 1) ;
                   RESULT = c ; :}            
          |     SI EXPR:e ALORS LINSTR:li1 SINON LINSTR:li2 FSI
                {: Condition c = new Condition(e, eleft + 1) ;
                   c.ajouterSi(li1) ;
                   c.ajouterSinon(li2) ;
                   RESULT = c ; :}
          |     SI EXPR:e ALORS SINON LINSTR:li2 FSI
                {: Condition c = new Condition(e, eleft + 1) ;
                   c.ajouterSinon(li2) ;
                   RESULT = c ; :}
                ;
    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
        		IDF:i
        		{: RESULT = new IDFVar(i, ileft + 1) ; :}
        |
        		IDF:i PAROUV PARFER
        		{: RESULT = new Appel(new IDFFonc(i,ileft+1,0), ileft +1,new ArrayList<Expression>()) ; :}
        |		IDF:i PAROUV PAR_EFF:cmpteur PARFER
        		{: RESULT = new Appel(new IDFFonc(i,ileft+1,cmpteur.size()), ileft +1, cmpteur) ; :}
        |		
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
                ;

PAR_EFF	::=		PAR_EFF:listefinal VIRGULE EXPR:idf
				{: listefinal.add(idf);
				RESULT = listefinal; :}
		|		EXPR:idf
				{: ArrayList<Expression> listeexpr = new ArrayList<Expression>();
				listeexpr.add(idf);
				RESULT = listeexpr; :}
				;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;
