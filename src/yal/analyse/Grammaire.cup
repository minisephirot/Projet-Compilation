package yal.analyse ;

import java.util.HashMap;

import yal.arbre.ArbreAbstrait;
import yal.arbre.BlocDInstructions;
import yal.arbre.expression.Expression;
import yal.arbre.expression.IDF;
import yal.arbre.expression.binaire.arithmetique.Div;
import yal.arbre.expression.binaire.arithmetique.Moins;
import yal.arbre.expression.binaire.arithmetique.Mult;
import yal.arbre.expression.binaire.arithmetique.Plus;
import yal.arbre.expression.binaire.comparaison.Different;
import yal.arbre.expression.binaire.comparaison.Egal;
import yal.arbre.expression.binaire.comparaison.Inferieur;
import yal.arbre.expression.binaire.comparaison.Superieur;
import yal.arbre.expression.binaire.logique.EtLogique;
import yal.arbre.expression.binaire.logique.OuLogique;
import yal.arbre.expression.constante.ConstanteBool;
import yal.arbre.expression.constante.ConstanteEntiere;
import yal.arbre.expression.unaire.MoinsUnaire;
import yal.arbre.expression.unaire.NonLogique;
import yal.arbre.instruction.Affectation;
import yal.arbre.instruction.Ecrire;
import yal.arbre.instruction.Instruction;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.outils.tableDesSymboles.EntreeVar;
import yal.outils.tableDesSymboles.SymboleVar;
import yal.outils.tableDesSymboles.TableDesSymboles;


import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    POINTVIRGULE, PLUS, MOINS, MULT, DIV, PAROUV, PARFER ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON, EGAL, PROGRAMME, ENTIER, DEBUT, FIN, ECR;
terminal String    CONSTANTECHAINE, CONSTANTEINT, CONSTANTEBOOL, IDF;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG ;
non terminal BlocDInstructions LINSTR;
non terminal Expression EXPR, CSTE ;
non terminal Affectation AFFECT;
non terminal DECL, DECL_VAR;
non terminal Instruction INSTR;
non terminal Ecrire ECRIRE;

precedence left OU ;
precedence left ET ;
precedence left EGALEGAL, DIFF;
precedence left INF, SUP ;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=    	PROGRAMME IDF DEBUT DECL LINSTR:bi FIN
				{: RESULT = bi ; :}
		|		PROGRAMME IDF DEBUT LINSTR:bi FIN
				{: RESULT = bi; :}
				;

		
DECL    ::=     DECL  DECL_VAR
	
		|		DECL_VAR
				;
		
DECL_VAR ::=		ENTIER IDF:i POINTVIRGULE
				{: TableDesSymboles.getInstance().ajouter(new EntreeVar(i), new SymboleVar()) ; :}
		|		ENTIER IDF:i EGAL EXPR:e POINTVIRGULE
				{: TableDesSymboles.getInstance().ajouter(new EntreeVar(i), new SymboleVar(e)) ; :}

				;
LINSTR  ::=     LINSTR:bi INSTR:i
				{: bi.ajouter(i);
					RESULT = bi;   :}
		|		INSTR:i
				{:  BlocDInstructions bi = new BlocDInstructions(ileft+1);
					bi.ajouter(i);
					RESULT = bi; :}
				;
		
INSTR   ::=     AFFECT:a 
				{: RESULT = a ; :}
		|		ECRIRE:e
				{: RESULT = e ; :}
				;
			
ECRIRE  ::=     ECR EXPR:e POINTVIRGULE
				{: RESULT = new Ecrire(e, eleft +1); :}
		|		ECR CONSTANTECHAINE:c POINTVIRGULE
				{: RESULT = new Ecrire(c, cleft + 1); :}
				;

AFFECT  ::=     IDF:idf EGAL EXPR:e POINTVIRGULE
				{: RESULT = new Affectation(idf, e, eleft +1); :}
				;
    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
        		    IDF:i
        		    {: RESULT = new IDF(i, ileft + 1) ;  :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;